/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-05-09 03:37:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.post;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class postDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<!-- 부트스트랩 -->\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n");
      out.write("<!-- 번들 -->\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\n");
      out.write("<style>\n");
      out.write("*{margin: 0;padding: 0;list-style: none;;}\n");
      out.write("\n");
      out.write("#reply{display:none};\n");
      out.write("\n");
      out.write("#modDiv{width: 100%;max-width: 600px;\n");
      out.write("margin: 0 auto;\n");
      out.write("padding:10px;\n");
      out.write("box-sizing: border-box;\n");
      out.write("background-color: blanchedalmond;}\n");
      out.write("\n");
      out.write(".btn_content{width: 100%;\n");
      out.write("border-radius: 5px;\n");
      out.write("background-color: #fff;;}\n");
      out.write("\n");
      out.write(".btn_content button{\n");
      out.write("display: block;	\n");
      out.write("width: 100%;\n");
      out.write("background-color: blueviolet;\n");
      out.write("border: 0;\n");
      out.write("padding: 10px;\n");
      out.write("border-bottom: 1px solid #ddd;\n");
      out.write("background-color: transparent;}\n");
      out.write("\n");
      out.write(".btn_content button:last-child{border-bottom: 0;}\n");
      out.write("\n");
      out.write("\n");
      out.write(".btn_content button:hover{background-color: #484848; color: #fff;}\n");
      out.write("\n");
      out.write("    \n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"container\">\n");
      out.write("<div>\n");
      out.write("	<h2>게시글</h2>\n");
      out.write("	작성자 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.writer }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\n");
      out.write("	제목 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.title }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\n");
      out.write("	내용 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.content }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<hr/>\n");
      out.write("<h2>댓글</h2>\n");
      out.write("	\n");
      out.write("	<hr/>\n");
      out.write("\n");
      out.write("	<div id=\"replies\"></div>\n");
      out.write("	\n");
      out.write("	<!-- 댓글 작성란 -->\n");
      out.write("	<div>\n");
      out.write("		<div>\n");
      out.write("			REPLYER <input type=\"text\" id=\"newReplyWriter\"> \n");
      out.write("		</div>\n");
      out.write("		<div>\n");
      out.write("			REPLY TEXT <input type=\"text\" id=\"newReplyText\">\n");
      out.write("		</div>\n");
      out.write("		<button id=\"replyAddBtn\">ADD REPLY</button>\n");
      out.write("	</div>\n");
      out.write("	<hr/>\n");
      out.write("\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	<!-- 모달창 -->\n");
      out.write("	<div id=\"modDiv\" style=\"display:none;\">\n");
      out.write("		<div class =\"modal-title\">\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<div class=\"btn_content\">\n");
      out.write("			<button type=\"button\" id=\"reReplyBtn\">답글달기</button>\n");
      out.write("			<button type=\"button\" id=\"btn\">수정</button>\n");
      out.write("			<button type=\"button\" id=\"replyDelBtn\">삭제</button>\n");
      out.write("			<button type=\"button\" id=\"replyModBtn\">저장</button>\n");
      out.write("			<button type=\"button\" id=\"closeBtn\">닫기</button>	\n");
      out.write("			\n");
      out.write("			\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("</div>\n");
      out.write("	\n");
      out.write("	<!-- jquery cdn 코드 -->\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>		\n");
      out.write("	<script type=\"text/javascript\">\n");
      out.write("	\n");
      out.write("$(\"#btn\").click(function(){\n");
      out.write("	$(\"#reply\").stop().show();\n");
      out.write("})\n");
      out.write("	\n");
      out.write("	/* 댓글 불러오는 로직 */\n");
      out.write("	let post_num = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.post_num}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\n");
      out.write("\n");
      out.write("	 function getAllList(){\n");
      out.write("		$.getJSON(\"/replies/all/\" + post_num, function(data){\n");
      out.write("\n");
      out.write("			var str = \"\";\n");
      out.write("			console.log(data);\n");
      out.write("			\n");
      out.write("			$(data).each(\n");
      out.write("				function() {\n");
      out.write("					// 시간\n");
      out.write("					let timestamp = this.update_date;\n");
      out.write("					let date = new Date(timestamp);\n");
      out.write("					\n");
      out.write("					let formattedTime = \" 게시일 : \" + date.getFullYear()\n");
      out.write("										+ \"/\" + (date.getMonth()+1)\n");
      out.write("										+ \"/\" + date.getDate()\n");
      out.write("										+ \"-\" + date.getHours()\n");
      out.write("										+\":\" + date.getMinutes()\n");
      out.write("										+\":\" + date.getSeconds()\n");
      out.write("										\n");
      out.write("					str += \"<div class='replyLi' data-reply_num='\" + this.reply_num + \"'><strong>@\"\n");
      out.write("						+ this.reply_id + \"</strong> - \" + formattedTime + \"<br>\"\n");
      out.write("						+ \"<div class='reply_content'>\" + this.reply_content + \"</div>\"\n");
      out.write("						+ \"<input type='text' id='reply'>\"\n");
      out.write("						+ \"<button type='button' class='btn btn-info'>수정/삭제</button>\"\n");
      out.write("						+ \"</div>\";\n");
      out.write("				});\n");
      out.write("		\n");
      out.write("			$(\"#replies\").html(str);			\n");
      out.write("		});\n");
      out.write("	 }\n");
      out.write("	 getAllList();\n");
      out.write("	 \n");
      out.write("	 /* 댓글 작성 후 댓글작성란 비우는 로직 */\n");
      out.write("	 function refresh(){\n");
      out.write("		 $(\"#newReplyWriter\").val(\"\");\n");
      out.write("		 $(\"#newReplyText\").val(\"\");	 \n");
      out.write("	 }\n");
      out.write("	 \n");
      out.write("	 $(\"#replyAddBtn\").on(\"click\", function(){\n");
      out.write("			var reply_id = $(\"#newReplyWriter\").val();\n");
      out.write("			var reply_content = $(\"#newReplyText\").val();\n");
      out.write("			\n");
      out.write("			$.ajax({\n");
      out.write("				type : 'post',\n");
      out.write("				url : '/replies',\n");
      out.write("				headers : {\n");
      out.write("					\"Content-Type\" : \"application/json\",\n");
      out.write("					\"X-HTTP-Method-Override\" : \"POST\"\n");
      out.write("				},\n");
      out.write("				dataType : 'text',\n");
      out.write("				data : JSON.stringify({\n");
      out.write("					post_num : post_num,\n");
      out.write("					reply_id : reply_id,\n");
      out.write("					reply_content : reply_content\n");
      out.write("				}),\n");
      out.write("				success : function(result){\n");
      out.write("					if(result == 'OK'){\n");
      out.write("						alert(\"등록되었습니다.\");\n");
      out.write("						getAllList();\n");
      out.write("						refresh();\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				/* error도 설정 가능 */\n");
      out.write("			});\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("	 \n");
      out.write("	// 이벤트 위임\n");
      out.write("	 $(\"#replies\").on(\"click\", \" button\", function(){\n");
      out.write("		let replytag=$(this).parent();\n");
      out.write("	 console.log(replytag);\n");
      out.write("		\n");
      out.write("		let reply_num = replytag.attr(\"data-reply_num\");\n");
      out.write("		console.log(reply_num);\n");
      out.write("		\n");
      out.write("		let reply_content = $(this).siblings(\".reply_content\").text();\n");
      out.write("		\n");
      out.write("		$(\".modal-title\").html(reply_num);\n");
      out.write("		$(\"#reply\").val(reply_content);\n");
      out.write("		$(\"#modDiv\").show(\"slow\");\n");
      out.write("	 });\n");
      out.write("	\n");
      out.write("	 // 닫기\n");
      out.write("	 $(\"#closeBtn\").on(\"click\", function(){\n");
      out.write("		 $(\"#modDiv\").hide(\"slow\");\n");
      out.write("	 });\n");
      out.write("	 \n");
      out.write("	 // 삭제\n");
      out.write("	 $(\"#replyDelBtn\").on(\"click\", function(){\n");
      out.write("		let reply_num = $(\".modal-title\").html();\n");
      out.write("		$.ajax({\n");
      out.write("			type : 'delete',\n");
      out.write("			url : '/replies/' + reply_num,\n");
      out.write("			header : {\n");
      out.write("				\"X-HTTP-Method-Override\" : \"DELETE\"\n");
      out.write("			},\n");
      out.write("			\n");
      out.write("			dataType : 'text',\n");
      out.write("			success : function(result){\n");
      out.write("				console.log(\"result: \" + result);\n");
      out.write("				if(result == 'SUCCESS'){\n");
      out.write("					alert(\"삭제 되었습니다.\");\n");
      out.write("					$(\"#modDiv\").hide(\"slow\");\n");
      out.write("					getAllList();\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	 });\n");
      out.write("	 \n");
      out.write("	 // 수정버튼\n");
      out.write("	 $(\"#replyModBtn\").on(\"click\", function(){\n");
      out.write("		let reply_num = $(\".modal-title\").html();\n");
      out.write("		let reply_content = $(\"#reply\").val();\n");
      out.write("		\n");
      out.write("		$.ajax({\n");
      out.write("			type : 'patch', \n");
      out.write("			url : '/replies/' + reply_num,\n");
      out.write("			header : {\n");
      out.write("				\"Content-Type\" : \"application/json\",\n");
      out.write("				\"X-HTTP-Method-Override\" : \"PATCH\" \n");
      out.write("			},	\n");
      out.write("			contentType:\"application/json\", // json 자료를 추가로 입력받기 때문에\n");
      out.write("			data: JSON.stringify({reply_content:reply_content}),\n");
      out.write("			dataType : 'text',\n");
      out.write("			success : function(result){\n");
      out.write("				console.log(\"result: \" + result);\n");
      out.write("				if(result == 'SUCCESS'){\n");
      out.write("					alert(\"수정되었습니다.\");\n");
      out.write("					$(\"#modDiv\").hide(\"slow\");\n");
      out.write("					getAllList(); //수정된 댓글 반영한 새 댓글목록 갱신\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	 });\n");
      out.write("	 \n");
      out.write("	 \n");
      out.write("	 </script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
